(function() {

  var layouts = <%= layouts %>;
  var basePath = '<%= host %>';
  

  function createService($http) {


    function load(type, id, callback) {
      var layout = layouts[type];
      $http({ method: 'GET', url: basePath + layout.path + '/' + id })
        .success(function(res) { callback(null, res); })
        .error(function(res) { callback(res); })
      ;
    }

    
    function save(doc, callback) {
      if (!doc.type) return callback(new Error('Doc has no type property'));
      var layout = layouts[doc.type];

      if (doc._id) {
        $http({ method: 'PUT',
                url: basePath + layout.path + '/' + doc._id + '?rev=' + doc._rev,
                data: doc })
          .success(function(res) { callback(null, res); })
          .error(function(res) { callback(res); })
        ;
      }
      else {
        $http({ method: 'POST',
                url: basePath + layout.path,
                data: doc })
          .success(function(res) { callback(null, res); })
          .error(function(res) { callback(res); })
        ;
      }
    }

    
    function destroy(doc, callback) {
      if (!doc.type) return callback(new Error('Doc is missing type property'));
      if (!doc._id)  return callback(new Error('Doc is missing no _id property'));
      if (!doc._rev) return callback(new Error('Doc is missing _rev property'));
      
      var layout = layouts[doc.type];
      $http({ method: 'DELETE', url: basePath + layout.path + '/' + doc._id + '?rev=' + doc._rev })
        .success(function(res) { callback(null, res); })
        .error(function(res) { callback(res); })
      ;
    }

    
    function view(type, name, callback) {
      var layout = layouts[type];

      if (!layout.viewPaths[name]) return callback(new Error('View does not exist: ' + name));

      $http({ method: 'GET', url: basePath + layout.viewPaths[name] })
        .success(function(res) { callback(null, res); })
        .error(function(res) { callback(res); })
      ;
    }

    
    function schema(type) {
      return layouts[type].schema;
    }

    
    return {
      load: load,
      save: save,
      destroy: destroy,
      view: view,
      schema: schema
    };
  }
  
  angular.module('comodl', [])
    .service('comodl', function($http) {
      return createService($http);
    })
  ;

})();